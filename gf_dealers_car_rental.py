import streamlit as st
import pandas as pd
import datetime
from PIL import Image
import re
import os
import base64
from io import BytesIO

# Set page config at the start of the file
st.set_page_config(
    page_title="Green Future - Thu√™ xe VinFast",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Enhanced CSS for full-screen landscape layout
st.markdown("""
<style>
    /* Full screen layout */
    .stApp {
        max-width: 100vw !important;
        padding: 0 !important;
    }
    
    /* Header styling */
    .main-header {
        background: linear-gradient(90deg, #1a472a, #2e8b57);
        color: white;
        padding: 2rem 4rem;
        margin: 0;
        width: 100%;
        text-align: center;
        font-size: 3.5rem;
    }
    
    .sub-header {
        background: rgba(46, 139, 87, 0.1);
        color: #1a472a;
        padding: 1rem 4rem;
        margin: 0 0 2rem 0;
        text-align: center;
        font-size: 1.8rem;
    }
    
    /* Banner container */
    .banner-container {
        width: 100%;
        max-height: 60vh;
        overflow: hidden;
        position: relative;
        margin-bottom: 2rem;
    }
    
    .banner-container img {
        width: 100%;
        object-fit: cover;
    }
    
    /* Statistics section */
    .section {
        padding: 2rem 4rem;
        margin: 0;
        background: white;
    }
    
    .stat-box {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border-radius: 20px;
        padding: 2.5rem 1.5rem;
        text-align: center;
        box-shadow: 0 10px 20px rgba(46, 139, 87, 0.1),
                   0 6px 6px rgba(0, 0, 0, 0.05);
        margin: 1rem;
        transition: all 0.3s ease;
        border: 1px solid rgba(46, 139, 87, 0.1);
        position: relative;
        overflow: hidden;
    }
    
    .stat-box::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, #1a472a, #2e8b57);
    }
    
    .stat-box:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(46, 139, 87, 0.2),
                   0 10px 10px rgba(0, 0, 0, 0.05);
    }
    
    .stat-number {
        font-size: 3rem;
        font-weight: 800;
        background: linear-gradient(90deg, #1a472a, #2e8b57);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1rem;
        line-height: 1;
    }
    
    .stat-label {
        font-size: 1.1rem;
        color: #495057;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    @media (max-width: 768px) {
        .stat-box {
            padding: 1.5rem 1rem;
        }
        
        .stat-number {
            font-size: 2.5rem;
        }
        
        .stat-label {
            font-size: 0.9rem;
        }
    }
    
    /* Search and filter section */
    .filter-panel {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin: 1rem 0;
    }
    
    /* Car cards grid */
    .car-card {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }
    
    .car-card:hover {
        transform: translateY(-5px);
    }
    
    /* Price styling */
    .price {
        font-size: 1.5rem;
        color: #2e8b57;
        font-weight: bold;
        margin: 1rem 0;
    }
    
    /* Button styling */
    .stButton button {
        background-color: #2e8b57;
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: bold;
        transition: background-color 0.2s;
    }
    
    .stButton button:hover {
        background-color: #1a472a;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2.5rem;
            padding: 1.5rem 2rem;
        }
        
        .sub-header {
            font-size: 1.3rem;
            padding: 1rem 2rem;
        }
        
        .section {
            padding: 1rem 2rem;
        }
        
        .stat-number {
            font-size: 2rem;
        }
        
        .stat-label {
            font-size: 1rem;
        }
    }
    
    /* Hide Streamlit default elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {display: none;}
    
    /* Scrollbar styling */
    ::-webkit-scrollbar {
        width: 10px;
        height: 10px;
    }
    
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #2e8b57;
        border-radius: 5px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #1a472a;
    }
</style>
""", unsafe_allow_html=True)

# Add this JavaScript function at the beginning of your script, after the CSS styles
st.markdown("""
    <script>
        function scrollToTop() {
            window.scrollTo(0, 0);
        }
    </script>
""", unsafe_allow_html=True)

# Add this CSS to ensure smooth scrolling
st.markdown("""
    <style>
        html {
            scroll-behavior: smooth;
        }
    </style>
""", unsafe_allow_html=True)


# T·∫°o d·ªØ li·ªáu xe
@st.cache_data
def load_data():
    data = {
        'T·ªânh/Th√†nh ph·ªë': [
            # H√† N·ªôi
            'H√† N·ªôi', 'H√† N·ªôi', 'H√† N·ªôi', 'H√† N·ªôi', 'H√† N·ªôi', 'H√† N·ªôi',
            # H·ªì Ch√≠ Minh
            'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh',
            # ƒê√† N·∫µng
            'ƒê√† N·∫µng', 'ƒê√† N·∫µng', 'ƒê√† N·∫µng', 'ƒê√† N·∫µng',
            # H·∫£i Ph√≤ng
            'H·∫£i Ph√≤ng', 'H·∫£i Ph√≤ng', 'H·∫£i Ph√≤ng',
            # C·∫ßn Th∆°
            'C·∫ßn Th∆°', 'C·∫ßn Th∆°', 'C·∫ßn Th∆°',
            # Kh√°nh H√≤a
            'Kh√°nh H√≤a', 'Kh√°nh H√≤a', 'Kh√°nh H√≤a',
            # Adding more entries for new models
            'H√† N·ªôi', 'H√† N·ªôi', 'H√† N·ªôi',
            'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh',
            'ƒê√† N·∫µng', 'ƒê√† N·∫µng',
            'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°'
        ],
        'Qu·∫≠n/Huy·ªán': [
            # H√† N·ªôi
            'C·∫ßu Gi·∫•y', 'Nam T·ª´ Li√™m', 'Ho√†ng Mai', 'ƒê·ªëng ƒêa', 'Thanh Xu√¢n', 'H√† ƒê√¥ng',
            # H·ªì Ch√≠ Minh
            'Qu·∫≠n 1', 'Qu·∫≠n 7', 'Th·ªß ƒê·ª©c', 'Qu·∫≠n 3', 'T√¢n B√¨nh', 'B√¨nh Th·∫°nh',
            # ƒê√† N·∫µng
            'H·∫£i Ch√¢u', 'Thanh Kh√™', 'S∆°n Tr√†', 'Ng≈© H√†nh S∆°n',
            # H·∫£i Ph√≤ng
            'H·ªìng B√†ng', 'Ng√¥ Quy·ªÅn', 'L√™ Ch√¢n',
            # C·∫ßn Th∆°
            'Ninh Ki·ªÅu', 'C√°i RƒÉng', 'B√¨nh Th·ªßy',
            # Kh√°nh H√≤a
            'Nha Trang', 'Cam Ranh', 'Ninh H√≤a',
            # Adding more entries for new models
            'Long Bi√™n', 'T√¢y H·ªì', 'Ba ƒê√¨nh',
            'Qu·∫≠n 5', 'Qu·∫≠n 10', 'Qu·∫≠n 4',
            'Li√™n Chi·ªÉu', 'C·∫©m L·ªá',
            'Ki·∫øn An', '√î M√¥n'
        ],
        'Dealer Name': [
            # H√† N·ªôi
            'VinFast C·∫ßu Gi·∫•y Auto', 'Green Future HN Premium', 'VinFast Ho√†ng Mai', 
            'Green Future ƒê·ªëng ƒêa', 'VinFast Thanh Xu√¢n', 'Green Future H√† ƒê√¥ng',
            # H·ªì Ch√≠ Minh
            'VinFast Central S√†i G√≤n', 'Green Future District 7', 'VinFast Th·ªß ƒê·ª©c', 
            'Saigon Green Mobility', 'VinFast T√¢n B√¨nh', 'Green Future B√¨nh Th·∫°nh',
            # ƒê√† N·∫µng
            'VinFast ƒê√† N·∫µng Center', 'Green Future ƒê√† N·∫µng', 'Dragon Auto DN', 'VinFast NGS',
            # H·∫£i Ph√≤ng
            'VinFast H·∫£i Ph√≤ng', 'HP Green Auto', 'Green Future HP',
            # C·∫ßn Th∆°
            'Mekong Auto', 'Green Future CT', 'VinFast C·∫ßn Th∆°',
            # Kh√°nh H√≤a
            'VinFast Nha Trang', 'Green Future KH', 'Nha Trang Green Auto',
            # Adding more entries for new models
            'VinFast Long Bi√™n', 'Green Future T√¢y H·ªì', 'VinFast Ba ƒê√¨nh',
            'VinFast Qu·∫≠n 5', 'Green Future Q10', 'VinFast Qu·∫≠n 4',
            'VinFast Li√™n Chi·ªÉu', 'Green Future C·∫©m L·ªá',
            'VinFast Ki·∫øn An', 'VinFast √î M√¥n'
        ],
        'ƒê·ªãa ch·ªâ c·ª• th·ªÉ': [
            # H√† N·ªôi
            '258 Xu√¢n Th·ªßy', '68 M·ªπ ƒê√¨nh', '159 Gi·∫£i Ph√≥ng',
            '475 X√£ ƒê√†n', '235 Nguy·ªÖn Tr√£i', '198 Quang Trung',
            # H·ªì Ch√≠ Minh
            '11-13 L√™ Du·∫©n', '1059 Nguy·ªÖn VƒÉn Linh', '12 V√µ VƒÉn Ng√¢n',
            '86 Nam K·ª≥ Kh·ªüi Nghƒ©a', '120 Ho√†ng VƒÉn Th·ª•', '11 X√¥ Vi·∫øt Ngh·ªá Tƒ©nh',
            # ƒê√† N·∫µng
            '156 Nguy·ªÖn VƒÉn Linh', '68 ƒêi·ªán Bi√™n Ph·ªß', '365 Ng√¥ Quy·ªÅn', '99 V√µ Nguy√™n Gi√°p',
            # H·∫£i Ph√≤ng
            '7 L·∫°ch Tray', '189 ƒê√† N·∫µng', '68 Tr·∫ßn Nguy√™n H√£n',
            # C·∫ßn Th∆°
            '131 Tr·∫ßn H∆∞ng ƒê·∫°o', '246 CMT8', '78 V√µ VƒÉn Ki·ªát',
            # Kh√°nh H√≤a
            '86 Tr·∫ßn Ph√∫', '168 23/10', '55 Th√°i Nguy√™n',
            # Adding more entries for new models
            '456 Nguy·ªÖn VƒÉn C·ª´', '789 L·∫°c Long Qu√¢n', '101 ƒê·ªôi C·∫•n',
            '234 An D∆∞∆°ng V∆∞∆°ng', '567 L√Ω Th∆∞·ªùng Ki·ªát', '890 Kh√°nh H·ªôi',
            '123 Ho√†ng VƒÉn Th√°i', '456 √îng √çch Khi√™m',
            '789 Tr·∫ßn Th√†nh Ng·ªç', '101 Nguy·ªÖn VƒÉn C·ª´'
        ],
        'Model': [
            # H√† N·ªôi
            'VF e34', 'VF 8', 'VF 9', 'VF 7', 'VF e34', 'VF 8',
            # H·ªì Ch√≠ Minh
            'VF 9', 'VF 8', 'VF 7', 'VF e34', 'VF 8', 'VF 9',
            # ƒê√† N·∫µng
            'VF e34', 'VF 8', 'VF 7', 'VF 9',
            # H·∫£i Ph√≤ng
            'VF e34', 'VF 7', 'VF 8',
            # C·∫ßn Th∆°
            'VF e34', 'VF 8', 'VF 9',
            # Kh√°nh H√≤a
            'VF 7', 'VF 8', 'VF 9',
            # Adding entries for VF3, VF5, VF6
            'VF3', 'VF3', 'VF3',
            'VF5', 'VF5', 'VF5',
            'VF6', 'VF6',
            'VF6', 'VF3'
        ],
        'Image Path': [
            # H√† N·ªôi
            'img/vfe34.png', 'img/vf8.png', 'img/vf9.png', 'img/vf7.png', 'img/vfe34.png', 'img/vf8.png',
            # H·ªì Ch√≠ Minh
            'img/vf9.png', 'img/vf8.png', 'img/vf7.png', 'img/vfe34.png', 'img/vf8.png', 'img/vf9.png',
            # ƒê√† N·∫µng
            'img/vfe34.png', 'img/vf8.png', 'img/vf7.png', 'img/vf9.png',
            # H·∫£i Ph√≤ng
            'img/vfe34.png', 'img/vf7.png', 'img/vf8.png',
            # C·∫ßn Th∆°
            'img/vfe34.png', 'img/vf8.png', 'img/vf9.png',
            # Kh√°nh H√≤a
            'img/vf7.png', 'img/vf8.png', 'img/vf9.png',
            # Adding entries for new models
            'img/vf3.png', 'img/vf3.png', 'img/vf3.png',
            'img/vf5.png', 'img/vf5.png', 'img/vf5.png',
            'img/vf6.png', 'img/vf6.png',
            'img/vf6.png', 'img/vf3.png'
        ],
        'Rental Fee (per day)': [
            # H√† N·ªôi
            550000, 780000, 950000, 680000, 520000, 750000,
            # H·ªì Ch√≠ Minh
            980000, 800000, 700000, 580000, 820000, 950000,
            # ƒê√† N·∫µng
            500000, 750000, 650000, 900000,
            # H·∫£i Ph√≤ng
            480000, 620000, 730000,
            # C·∫ßn Th∆°
            450000, 700000, 880000,
            # Kh√°nh H√≤a
            600000, 720000, 850000,
            # Adding entries for new models (with appropriate pricing)
            400000, 420000, 410000,  # VF3 (most affordable)
            480000, 500000, 490000,  # VF5
            580000, 600000, 590000, 400000  # VF6 and VF3
        ]
    }
    return pd.DataFrame(data)


# Load data
df = load_data()

# M√¥ t·∫£ m·∫´u xe
model_descriptions = {
    "VF 3": {
        "description": "M·∫´u xe ƒë√¥ th·ªã c·ª° nh·ªè, l√Ω t∆∞·ªüng cho di chuy·ªÉn trong ph·ªë.",
        "image": "vf3.png"
    },
    "VF e34": {
        "description": "M·∫´u SUV c·ª° nh·ªè ch·∫°y ƒëi·ªán v·ªõi ph·∫°m vi ho·∫°t ƒë·ªông 285km, c√¥ng su·∫•t 147 m√£ l·ª±c. Ph√π h·ª£p cho di chuy·ªÉn trong ph·ªë.",
        "image": "vfe34.png"
    },
    "VF 5": {
        "description": "M·∫´u SUV ƒë√¥ th·ªã nh·ªè g·ªçn v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i.",
        "image": "vf5.png"
    },
    "VF 6": {
        "description": "M·∫´u SUV c·ª° C v·ªõi thi·∫øt k·∫ø th·ªùi trang, c√¥ng ngh·ªá hi·ªán ƒë·∫°i.",
        "image": "vf6.png"
    },
    "VF 7": {
        "description": "M·∫´u SUV c·ª° v·ª´a v·ªõi thi·∫øt k·∫ø th·ªÉ thao, c√¥ng su·∫•t l√™n ƒë·∫øn 349 m√£ l·ª±c, ph·∫°m vi ho·∫°t ƒë·ªông 400km. L·ª±a ch·ªçn l√Ω t∆∞·ªüng cho gia ƒë√¨nh.",
        "image": "vf7.png"
    },
    "VF 8": {
        "description": "M·∫´u SUV c·ª° trung v·ªõi kh√¥ng gian r·ªông r√£i, c√¥ng su·∫•t 402 m√£ l·ª±c, ph·∫°m vi ho·∫°t ƒë·ªông 420km. ƒê√°p ·ª©ng nhu c·∫ßu di chuy·ªÉn xa v√† tho·∫£i m√°i.",
        "image": "vf8.png"
    },
    "VF 9": {
        "description": "M·∫´u SUV c·ª° l·ªõn v·ªõi 3 h√†ng gh·∫ø, kh√¥ng gian r·ªông r√£i, c√¥ng su·∫•t 408 m√£ l·ª±c, ph·∫°m vi ho·∫°t ƒë·ªông 438km. Ph√π h·ª£p cho gia ƒë√¨nh ƒë√¥ng ng∆∞·ªùi.",
        "image": "vf9.png"
    }
}

# Th√¥ng s·ªë k·ªπ thu·∫≠t chi ti·∫øt
model_specs = {
    "VF 3": {
        "C√¥ng su·∫•t": "100 kW (134 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "190 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "200 km",
        "Th·ªùi gian s·∫°c": "5 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "4",
        "D√†i x R·ªông x Cao": "3.114 x 1.670 x 1.621 mm",
        "Tr·ªçng l∆∞·ª£ng": "1.165 kg",
        "Dung l∆∞·ª£ng pin": "35 kWh"
    },
    "VF e34": {
        "C√¥ng su·∫•t": "150 kW (201 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "242 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "300 km",
        "Th·ªùi gian s·∫°c": "6 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "5",
        "D√†i x R·ªông x Cao": "4.300 x 1.793 x 1.613 mm",
        "Tr·ªçng l∆∞·ª£ng": "1.490 kg",
        "Dung l∆∞·ª£ng pin": "51 kWh"
    },
    "VF 5": {
        "C√¥ng su·∫•t": "130 kW (174 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "220 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "280 km",
        "Th·ªùi gian s·∫°c": "5.5 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "5",
        "D√†i x R·ªông x Cao": "3.965 x 1.720 x 1.580 mm",
        "Tr·ªçng l∆∞·ª£ng": "1.350 kg",
        "Dung l∆∞·ª£ng pin": "42 kWh"
    },
    "VF 6": {
        "C√¥ng su·∫•t": "170 kW (228 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "350 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "350 km",
        "Th·ªùi gian s·∫°c": "5.5 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "5",
        "D√†i x R·ªông x Cao": "4.238 x 1.820 x 1.594 mm",
        "Tr·ªçng l∆∞·ª£ng": "1.600 kg",
        "Dung l∆∞·ª£ng pin": "59.6 kWh"
    },
    "VF 7": {
        "C√¥ng su·∫•t": "260 kW (349 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "500 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "450 km",
        "Th·ªùi gian s·∫°c": "5 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "5",
        "D√†i x R·ªông x Cao": "4.545 x 1.890 x 1.635 mm",
        "Tr·ªçng l∆∞·ª£ng": "1.680 kg",
        "Dung l∆∞·ª£ng pin": "75.3 kWh"
    },
    "VF 8": {
        "C√¥ng su·∫•t": "300 kW (402 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "620 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "550 km",
        "Th·ªùi gian s·∫°c": "5.5 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "5",
        "D√†i x R·ªông x Cao": "4.750 x 1.934 x 1.667 mm",
        "Tr·ªçng l∆∞·ª£ng": "2.050 kg",
        "Dung l∆∞·ª£ng pin": "87.7 kWh"
    },
    "VF 9": {
        "C√¥ng su·∫•t": "300 kW (402 m√£ l·ª±c)",
        "M√¥-men xo·∫Øn": "640 Nm",
        "Ph·∫°m vi ho·∫°t ƒë·ªông": "600 km",
        "Th·ªùi gian s·∫°c": "6 gi·ªù (10-80%)",
        "S·ªë ch·ªó ng·ªìi": "7",
        "D√†i x R·ªông x Cao": "5.120 x 2.000 x 1.721 mm",
        "Tr·ªçng l∆∞·ª£ng": "2.470 kg",
        "Dung l∆∞·ª£ng pin": "92 kWh"
    }
}

# Update the features dictionary to include all models
features = {
    "VF 3": [
        "H·ªá th·ªëng phanh ABS/EBD/ESC",
        "Camera l√πi",
        "C·∫£m bi·∫øn √°p su·∫•t l·ªëp",
        "M√†n h√¨nh c·∫£m ·ª©ng 10 inch"
    ],
    "VF e34": [
        "H·ªá th·ªëng h·ªó tr·ª£ l√°i ADAS",
        "C·∫£nh b√°o ƒëi·ªÉm m√π",
        "C·∫£nh b√°o va ch·∫°m ph√≠a tr∆∞·ªõc",
        "H·ªó tr·ª£ ƒë·ªó xe t·ª± ƒë·ªông"
    ],
    "VF 5": [
        "H·ªá th·ªëng ki·ªÉm so√°t h√†nh tr√¨nh",
        "C·∫£m bi·∫øn ƒë·ªó xe",
        "M√†n h√¨nh gi·∫£i tr√≠ 10 inch",
        "K·∫øt n·ªëi Apple CarPlay/Android Auto"
    ],
    "VF 6": [
        "H·ªá th·ªëng h·ªó tr·ª£ l√°i th√¥ng minh",
        "M√†n h√¨nh c·∫£m ·ª©ng 12.9 inch",
        "Camera 360 ƒë·ªô",
        "Tr·ª£ l√Ω ·∫£o th√¥ng minh"
    ],
    "VF 7": [
        "H·ªá th·ªëng h·ªó tr·ª£ l√°i n√¢ng cao",
        "M√†n h√¨nh c·∫£m ·ª©ng trung t√¢m 12.9 inch",
        "Tr·ª£ l√Ω ·∫£o",
        "H·ªá th·ªëng √¢m thanh cao c·∫•p"
    ],
    "VF 8": [
        "H·ªá th·ªëng t·ª± l√°i c·∫•p ƒë·ªô 2",
        "M√†n h√¨nh AR-HUD",
        "Gh·∫ø massage",
        "C·ª≠a s·ªï tr·ªùi to√†n c·∫£nh"
    ],
    "VF 9": [
        "H·ªá th·ªëng t·ª± l√°i c·∫•p ƒë·ªô 2+",
        "7 gh·∫ø ng·ªìi r·ªông r√£i",
        "M√†n h√¨nh gi·∫£i tr√≠ 15.6 inch",
        "H·ªá th·ªëng l√†m m√°t/s∆∞·ªüi gh·∫ø to√†n xe"
    ]
}


# H√†m l·∫•y ·∫£nh cho m·ªói m·∫´u xe
@st.cache_data
def get_model_image(model):
    """Get image for a specific VinFast model from local img folder"""
    try:
        # Convert model name to lowercase and remove spaces for filename
        # e.g., 'VF e34' -> 'vfe34', 'VF 8' -> 'vf8'
        model_filename = f"img/{''.join(model.lower().split())}.png"
        return Image.open(model_filename)
    except FileNotFoundError:
        st.warning(f"Image not found: {model_filename}. Please ensure the image exists in the img folder.")
        # Fallback to placeholder image
        return None

# Ensure img directory exists
if not os.path.exists("img"):
    os.makedirs("img")
    st.warning("""
        The 'img' directory has been created. Please add the following images:
        - img/vf3.png
        - img/vfe34.png
        - img/vf5.png
        - img/vf6.png
        - img/vf7.png
        - img/vf8.png
        - img/vf9.png
    """)


# ƒê·ªãnh d·∫°ng ti·ªÅn
def format_currency(amount):
    return f"{amount:,.0f} VNƒê"


# H√†m t√¨m ki·∫øm n√¢ng cao
def advanced_search(df, keywords="", province=None, district=None, model=None, price_min=None, price_max=None):
    """
    H√†m t√¨m ki·∫øm n√¢ng cao v·ªõi nhi·ªÅu ti√™u ch√≠
    """
    result = df.copy()

    # T√¨m ki·∫øm theo t·ª´ kh√≥a
    if keywords:
        keyword_pattern = '|'.join(re.escape(keyword.strip()) for keyword in keywords.split())
        mask = (
                result['Model'].str.contains(keyword_pattern, case=False, regex=True) |
                result['Dealer Name'].str.contains(keyword_pattern, case=False, regex=True) |
                result['T·ªânh/Th√†nh ph·ªë'].str.contains(keyword_pattern, case=False, regex=True) |
                result['Qu·∫≠n/Huy·ªán'].str.contains(keyword_pattern, case=False, regex=True) |
                result['ƒê·ªãa ch·ªâ c·ª• th·ªÉ'].str.contains(keyword_pattern, case=False, regex=True)
        )
        result = result[mask]

    # L·ªçc theo t·ªânh/th√†nh ph·ªë
    if province and province != "T·∫•t c·∫£":
        result = result[result['T·ªânh/Th√†nh ph·ªë'] == province]

    # L·ªçc theo qu·∫≠n/huy·ªán
    if district and district != "T·∫•t c·∫£":
        result = result[result['Qu·∫≠n/Huy·ªán'] == district]

    # L·ªçc theo m·∫´u xe
    if model and model != "T·∫•t c·∫£":
        result = result[result['Model'] == model]

    # L·ªçc theo kho·∫£ng gi√°
    if price_min is not None:
        result = result[result['Rental Fee (per day)'] >= price_min]
    if price_max is not None:
        result = result[result['Rental Fee (per day)'] <= price_max]

    return result

def get_image_base64(model):
    """Convert image to base64 string"""
    try:
        img = get_model_image(model)
        if img is not None:
            buffered = BytesIO()
            img.save(buffered, format="PNG")
            return base64.b64encode(buffered.getvalue()).decode()
    except Exception:
        return ""  # Return empty string if image processing fails
    return ""  # Return empty string if image processing fails

# H√†m hi·ªÉn th·ªã th·∫ª xe
def display_car_card(car):
    st.markdown("""
        <div class='car-card'>
            <div class='car-grid'>
                <div class='car-image'>
                    <img src="data:image/png;base64,{}" alt="{}" style="width: 100%; height: auto;">
                </div>
                <div class='car-info'>
                    <h4 class='car-model'>{}</h4>
                    <div class='dealer-info'>
                        <p><i class='fas fa-store'></i> <b>ƒê·∫°i l√Ω:</b> {}</p>
                        <p><i class='fas fa-map-marker-alt'></i> <b>ƒê·ªãa ch·ªâ:</b> {}, {}, {}</p>
                    </div>
                    <p class='price'>{}/ng√†y</p>
                </div>
            </div>
        </div>
    """.format(
        get_image_base64(car['Model']),
        car['Model'],
        car['Model'],
        car['Dealer Name'],
        car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ'],
        car['Qu·∫≠n/Huy·ªán'],
        car['T·ªânh/Th√†nh ph·ªë'],
        format_currency(car['Rental Fee (per day)'])
    ), unsafe_allow_html=True)

    # Add buttons using Streamlit's native components
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("ƒê·∫∑t xe ngay", key=f"book_{car['Model']}_{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}", use_container_width=True):
            st.session_state.booking_state['car_selected'] = {
                'model': car['Model'],
                'dealer': car['Dealer Name'],
                'address': f"{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}, {car['Qu·∫≠n/Huy·ªán']}, {car['T·ªânh/Th√†nh ph·ªë']}",
                'rental_fee': car['Rental Fee (per day)']
            }
            st.session_state.current_page = 'booking'
            st.session_state.booking_state['booking_step'] = 1
            st.rerun()

    with col2:
        if st.button("Xem chi ti·∫øt", key=f"details_{car['Model']}_{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}", use_container_width=True):
            st.session_state.car_detail = car['Model']
            st.session_state.car_detail_info = {
                'model': car['Model'],
                'dealer': car['Dealer Name'],
                'address': f"{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}, {car['Qu·∫≠n/Huy·ªán']}, {car['T·ªânh/Th√†nh ph·ªë']}",
                'rental_fee': car['Rental Fee (per day)']
            }
            # Add technical specifications to session state
            st.session_state.car_specs = model_specs.get(car['Model'], {})
            st.session_state.current_page = 'car_detail'
            st.rerun()

    # CSS for styling
    st.markdown("""
        <style>
            .car-card {
                background: white;
                border-radius: 15px;
                padding: 20px;
                margin: 15px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .car-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
            }
            
            .car-grid {
                display: grid;
                grid-template-columns: 1fr 1.5fr;
                gap: 20px;
                align-items: start;
            }
            
            .car-image {
                width: 100%;
                border-radius: 10px;
                overflow: hidden;
            }
            
            .car-info {
                padding: 10px 0;
            }
            
            .car-model {
                font-size: 1.5rem;
                font-weight: 600;
                color: #1a472a;
                margin-bottom: 15px;
            }
            
            .dealer-info {
                margin: 15px 0;
            }
            
            .dealer-info p {
                margin: 8px 0;
                color: #495057;
            }
            
            .dealer-info i {
                color: #2e8b57;
                margin-right: 8px;
            }
            
            .price {
                font-size: 1.3rem;
                font-weight: 700;
                color: #2e8b57;
                margin: 15px 0;
            }
            
            @media (max-width: 768px) {
                .car-grid {
                    grid-template-columns: 1fr;
                }
            }
        </style>
    """, unsafe_allow_html=True)

    # Handle button clicks using Streamlit components
    book_key = f"book_{car['Model']}_{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}"
    details_key = f"details_{car['Model']}_{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}"
    
    if st.session_state.get(book_key):
        st.session_state.booking_state['car_selected'] = {
            'model': car['Model'],
            'dealer': car['Dealer Name'],
            'address': f"{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}, {car['Qu·∫≠n/Huy·ªán']}, {car['T·ªânh/Th√†nh ph·ªë']}",
            'rental_fee': car['Rental Fee (per day)']
        }
        st.session_state.current_page = 'booking'
        st.session_state.booking_state['booking_step'] = 1
        st.rerun()
    
    if st.session_state.get(details_key):
        st.session_state.car_detail = car['Model']
        st.session_state.car_detail_info = {
            'model': car['Model'],
            'dealer': car['Dealer Name'],
            'address': f"{car['ƒê·ªãa ch·ªâ c·ª• th·ªÉ']}, {car['Qu·∫≠n/Huy·ªán']}, {car['T·ªânh/Th√†nh ph·ªë']}",
            'rental_fee': car['Rental Fee (per day)']
        }
        st.session_state.current_page = 'car_detail'
        st.rerun()




# Ki·ªÉm tra tr·∫°ng th√°i phi√™n l√†m vi·ªác v√† kh·ªüi t·∫°o n·∫øu c·∫ßn
if 'booking_state' not in st.session_state:
    st.session_state.booking_state = {
        'car_selected': None,
        'booking_step': 0,
        'customer_info': {},
        'booking_dates': {},
        'total_days': 0,
        'total_amount': 0
    }

# Th√™m session state ƒë·ªÉ theo d√µi trang hi·ªán t·∫°i
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'home'  # Trang ch·ªß l√† trang m·∫∑c ƒë·ªãnh

# Th√™m tr·∫°ng th√°i cho xe ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ xem chi ti·∫øt
if 'car_detail' not in st.session_state:
    st.session_state.car_detail = None

# Add this at the beginning of your main script, with other session state initializations
if 'car_detail_info' not in st.session_state:
    st.session_state.car_detail_info = None

# Header
st.markdown("<h1 class='main-header'>üåø Green Future</h1>", unsafe_allow_html=True)
st.markdown("<h2 class='sub-header'>D·ªãch v·ª• cho thu√™ xe ƒëi·ªán VinFast h√†ng ƒë·∫ßu Vi·ªát Nam</h2>", unsafe_allow_html=True)

# N√∫t quay l·∫°i trang ch·ªß n·∫øu ƒëang ·ªü trang kh√°c
if st.session_state.current_page != 'home':
    if st.button('‚Üê Quay l·∫°i trang ch·ªß'):
        st.session_state.current_page = 'home'
        st.session_state.car_detail = None
        st.session_state.booking_state['booking_step'] = 0
        st.rerun()

# X·ª≠ l√Ω hi·ªÉn th·ªã trang d·ª±a tr√™n current_page
if st.session_state.current_page == 'home':
    # Trang ch·ªß
    # Image Banner
    st.markdown("<div class='banner-container'>", unsafe_allow_html=True)
    try:
        banner_image = Image.open("img/banner.png")
        st.image(banner_image, use_container_width=True)
    except FileNotFoundError:
        st.warning("Banner image not found. Please place banner.png in the img folder.")
        st.image("https://via.placeholder.com/1200x400?text=Green+Future+Banner", use_container_width=True)
    st.markdown("</div>", unsafe_allow_html=True)

    # Calculate dynamic statistics
    total_cars = len(df)
    total_provinces = len(df['T·ªânh/Th√†nh ph·ªë'].unique())
    total_models = len(df['Model'].unique())
    support_hours = "24/7"

    # Format large numbers with comma separator
    def format_number(num):
        return f"{num:,}"

    # Th·ªëng k√™ ch√≠nh
    st.markdown("<div class='section'>", unsafe_allow_html=True)
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown(f"""
            <div class='stat-box'>
                <div class='stat-number'>{format_number(total_cars)}</div>
                <div class='stat-label'>Xe VinFast s·∫µn s√†ng</div>
            </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
            <div class='stat-box'>
                <div class='stat-number'>{format_number(total_provinces)}</div>
                <div class='stat-label'>T·ªânh/Th√†nh ph·ªë</div>
            </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
            <div class='stat-box'>
                <div class='stat-number'>{format_number(total_models)}</div>
                <div class='stat-label'>M·∫´u xe kh√°c nhau</div>
            </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown(f"""
            <div class='stat-box'>
                <div class='stat-number'>{support_hours}</div>
                <div class='stat-label'>H·ªó tr·ª£ kh√°ch h√†ng</div>
            </div>
        """, unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)

    # Khu v·ª±c t√¨m ki·∫øm v√† l·ªçc
    # st.markdown("<div class='section'>", unsafe_allow_html=True)
    st.markdown("<h3 class='section-header'>T√¨m ki·∫øm xe VinFast</h3>", unsafe_allow_html=True)

    # T√¨m ki·∫øm ƒë∆°n gi·∫£n
    search_keyword = st.text_input("üîç T√¨m ki·∫øm theo t·ª´ kh√≥a", placeholder="Nh·∫≠p t√™n m·∫´u xe, ƒë·∫°i l√Ω, ƒë·ªãa ƒëi·ªÉm...")

    # Panel l·ªçc n√¢ng cao
    with st.expander("L·ªçc n√¢ng cao", expanded=True):
        st.markdown("<div class='filter-panel'>", unsafe_allow_html=True)

        # H√†ng 1: L·ªçc ƒë·ªãa ƒëi·ªÉm v√† d√≤ng xe
        col1, col2, col3 = st.columns(3)

        with col1:
            filter_province = st.selectbox("T·ªânh/Th√†nh ph·ªë",
                                           options=["T·∫•t c·∫£"] + sorted(list(df['T·ªânh/Th√†nh ph·ªë'].unique())),
                                           key="province_filter")

        with col2:
            if filter_province != "T·∫•t c·∫£":
                district_options = ["T·∫•t c·∫£"] + sorted(
                    list(df[df['T·ªânh/Th√†nh ph·ªë'] == filter_province]['Qu·∫≠n/Huy·ªán'].unique()))
            else:
                district_options = ["T·∫•t c·∫£"] + sorted(list(df['Qu·∫≠n/Huy·ªán'].unique()))

            filter_district = st.selectbox("Qu·∫≠n/Huy·ªán",
                                           options=district_options,
                                           key="district_filter")

        with col3:
            filter_model = st.selectbox("D√≤ng xe VinFast",
                                        options=["T·∫•t c·∫£"] + sorted(list(df['Model'].unique())),
                                        key="model_filter")

        # H√†ng 2: Kho·∫£ng gi√° v√† s·∫Øp x·∫øp
        col1, col2 = st.columns(2)

        with col1:
            min_price, max_price = st.select_slider(
                "Kho·∫£ng gi√° (VNƒê/ng√†y)",
                options=[400000, 450000, 500000, 550000, 600000, 650000, 700000, 750000, 800000],
                value=(400000, 800000)
            )

        with col2:
            sort_by = st.selectbox(
                "S·∫Øp x·∫øp theo",
                options=["Gi√° th·∫•p ƒë·∫øn cao", "Gi√° cao ƒë·∫øn th·∫•p", "A-Z theo m·∫´u xe"]
            )

        st.markdown("</div>", unsafe_allow_html=True)

    # √Åp d·ª•ng t√¨m ki·∫øm v√† l·ªçc
    filtered_results = advanced_search(
        df,
        keywords=search_keyword,
        province=filter_province,
        district=filter_district,
        model=filter_model,
        price_min=min_price,
        price_max=max_price
    )

    # S·∫Øp x·∫øp k·∫øt qu·∫£
    if sort_by == "Gi√° th·∫•p ƒë·∫øn cao":
        filtered_results = filtered_results.sort_values(by="Rental Fee (per day)")
    elif sort_by == "Gi√° cao ƒë·∫øn th·∫•p":
        filtered_results = filtered_results.sort_values(by="Rental Fee (per day)", ascending=False)
    elif sort_by == "A-Z theo m·∫´u xe":
        filtered_results = filtered_results.sort_values(by="Model")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
    if not filtered_results.empty:
        st.markdown(f"<p>T√¨m th·∫•y <span class='highlight'>{len(filtered_results)}</span> k·∫øt qu·∫£</p>",
                    unsafe_allow_html=True)

        # Hi·ªán th·ªã k·∫øt qu·∫£ trong grid
        for i in range(0, len(filtered_results), 2):
            col1, col2 = st.columns(2)

            # X·ª≠ l√Ω c·ªôt 1
            if i < len(filtered_results):
                with col1:
                    car = filtered_results.iloc[i]
                    display_car_card(car)

            # X·ª≠ l√Ω c·ªôt 2
            if i + 1 < len(filtered_results):
                with col2:
                    car = filtered_results.iloc[i + 1]
                    display_car_card(car)
    else:
        st.info("Kh√¥ng t√¨m th·∫•y xe ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒëi·ªÅu ki·ªán kh√°c.")

    st.markdown("</div>", unsafe_allow_html=True)

    # Gi·ªõi thi·ªáu d·ªãch v·ª•
    st.markdown("<div class='section'>", unsafe_allow_html=True)
    st.markdown("<h3 class='section-header'>T·∫°i sao ch·ªçn Green Future?</h3>", unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown("<h4 class='feature-header'>üåø Th√¢n thi·ªán m√¥i tr∆∞·ªùng</h4>", unsafe_allow_html=True)
        st.write("Gi·∫£m ph√°t th·∫£i carbon v√† g√≥p ph·∫ßn b·∫£o v·ªá m√¥i tr∆∞·ªùng v·ªõi xe ƒëi·ªán kh√¥ng kh√≠ th·∫£i.")

    with col2:
        st.markdown("<h4 class='feature-header'>üí∞ Ti·∫øt ki·ªám chi ph√≠</h4>", unsafe_allow_html=True)
        st.write("Chi ph√≠ v·∫≠n h√†nh th·∫•p h∆°n so v·ªõi xe xƒÉng truy·ªÅn th·ªëng, ti·∫øt ki·ªám ƒë√°ng k·ªÉ.")

    with col3:
        st.markdown("<h4 class='feature-header'>üõ°Ô∏è An to√†n tuy·ªát ƒë·ªëi</h4>", unsafe_allow_html=True)
        st.write("C√°c m·∫´u xe VinFast ƒë·ªÅu ƒë·∫°t chu·∫©n an to√†n cao nh·∫•t, b·∫£o v·ªá b·∫°n v√† gia ƒë√¨nh.")

    with col4:
        st.markdown("<h4 class='feature-header'>üéß H·ªó tr·ª£ 24/7</h4>", unsafe_allow_html=True)
        st.write("ƒê·ªôi ng≈© h·ªó tr·ª£ k·ªπ thu·∫≠t lu√¥n s·∫µn s√†ng ph·ª•c v·ª• b·∫°n m·ªçi l√∫c, m·ªçi n∆°i.")

    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.current_page == 'car_detail':
    # Trang chi ti·∫øt xe
    if st.session_state.car_detail and st.session_state.car_detail_info:
        st.markdown("<div class='section'>", unsafe_allow_html=True)
        st.markdown(f"<h3 class='section-header'>Chi ti·∫øt xe {st.session_state.car_detail}</h3>", unsafe_allow_html=True)

        col1, col2 = st.columns([1, 1.5])

        with col1:
            img = get_model_image(st.session_state.car_detail)
            if img is not None:
                st.image(img, use_container_width=True)

        with col2:
            car_info = st.session_state.car_detail_info
            st.markdown(f"<h4>{car_info['model']}</h4>", unsafe_allow_html=True)
            st.markdown(f"<p><b>ƒê·∫°i l√Ω:</b> {car_info['dealer']}</p>", unsafe_allow_html=True)
            st.markdown(f"<p><b>ƒê·ªãa ch·ªâ:</b> {car_info['address']}</p>", unsafe_allow_html=True)
            st.markdown(f"<p class='price'>{format_currency(car_info['rental_fee'])}/ng√†y</p>", unsafe_allow_html=True)

            # Th√™m n√∫t ƒë·∫∑t xe
            if st.button("ƒê·∫∑t xe ngay", key="detail_booking_btn", use_container_width=True):
                st.session_state.booking_state['car_selected'] = car_info
                st.session_state.current_page = 'booking'
                st.session_state.booking_state['booking_step'] = 1
                st.rerun()

        # Hi·ªÉn th·ªã th√¥ng s·ªë k·ªπ thu·∫≠t
        st.markdown("<h5>Th√¥ng s·ªë k·ªπ thu·∫≠t</h5>", unsafe_allow_html=True)
        specs = model_specs.get(st.session_state.car_detail, {})

        # Hi·ªÉn th·ªã th√¥ng s·ªë trong b·∫£ng
        specs_data = {'Th√¥ng s·ªë': list(specs.keys()), 'Gi√° tr·ªã': list(specs.values())}
        specs_df = pd.DataFrame(specs_data)
        st.table(specs_df)

        # T√≠nh nƒÉng n·ªïi b·∫≠t
        st.markdown("<h5>T√≠nh nƒÉng n·ªïi b·∫≠t</h5>", unsafe_allow_html=True)
        if st.session_state.car_detail == "VF e34":
            features = ["H·ªá th·ªëng h·ªó tr·ª£ l√°i ADAS", "C·∫£nh b√°o ƒëi·ªÉm m√π", "C·∫£nh b√°o va ch·∫°m ph√≠a tr∆∞·ªõc",
                        "H·ªó tr·ª£ ƒë·ªó xe t·ª± ƒë·ªông"]
        elif st.session_state.car_detail == "VF 7":
            features = ["H·ªá th·ªëng h·ªó tr·ª£ l√°i n√¢ng cao", "M√†n h√¨nh c·∫£m ·ª©ng trung t√¢m 12.9 inch", "Tr·ª£ l√Ω ·∫£o",
                        "H·ªá th·ªëng √¢m thanh cao c·∫•p"]
        elif st.session_state.car_detail == "VF 8":
            features = ["H·ªá th·ªëng t·ª± l√°i c·∫•p ƒë·ªô 2", "M√†n h√¨nh AR-HUD", "Gh·∫ø massage", "C·ª≠a s·ªï tr·ªùi to√†n c·∫£nh"]
        elif st.session_state.car_detail == "VF 9":
            features = ["H·ªá th·ªëng t·ª± l√°i c·∫•p ƒë·ªô 2+", "7 gh·∫ø ng·ªìi r·ªông r√£i", "M√†n h√¨nh gi·∫£i tr√≠ 15.6 inch",
                        "H·ªá th·ªëng l√†m m√°t/s∆∞·ªüi gh·∫ø to√†n xe"]
        else:
            features = []

        for feature in features:
            st.markdown(f"‚úì {feature}")

    # Hi·ªÉn th·ªã ƒë√°nh gi√° v√† nh·∫≠n x√©t
    st.markdown("<h4>ƒê√°nh gi√° t·ª´ kh√°ch h√†ng</h4>", unsafe_allow_html=True)

    # D·ªØ li·ªáu ƒë√°nh gi√° gi·∫£ l·∫≠p
    reviews = [
        {"name": "Nguy·ªÖn VƒÉn A", "rating": 5, "comment": "Xe ch·∫°y r·∫•t √™m, pin tr√¢u, r·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª•!"},
        {"name": "Tr·∫ßn Th·ªã B", "rating": 4, "comment": "Xe ƒë·∫πp, r·ªông r√£i. Ch·ªâ ti·∫øc l√† tr·∫°m s·∫°c h∆°i √≠t."},
        {"name": "L√™ VƒÉn C", "rating": 5,
         "comment": "Thu√™ cho chuy·∫øn du l·ªãch gia ƒë√¨nh, m·ªçi ng∆∞·ªùi ƒë·ªÅu th√≠ch. S·∫Ω thu√™ l·∫°i!"}
    ]

    for review in reviews:
        st.markdown(f"""
        <div style="border-left: 3px solid #00af66; padding-left: 10px; margin-bottom: 15px;">
            <p><b>{review['name']}</b> - {'‚≠ê' * review['rating']}</p>
            <p>{review['comment']}</p>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)

    # Hi·ªÉn th·ªã xe t∆∞∆°ng t·ª±
    st.markdown("<div class='section'>", unsafe_allow_html=True)
    st.markdown("<h3 class='section-header'>Xe t∆∞∆°ng t·ª±</h3>", unsafe_allow_html=True)

    # L·ªçc c√°c xe kh√°c c√πng model nh∆∞ng kh√°c ƒë·∫°i l√Ω ho·∫∑c ƒë·ªãa ƒëi·ªÉm
    similar_cars = df[df['Model'] != st.session_state.car_detail].sample(min(4, len(df[df['Model'] != st.session_state.car_detail]))).reset_index()

    # Hi·ªÉn th·ªã trong l∆∞·ªõi 2x2
    for i in range(0, len(similar_cars), 2):
        cols = st.columns(2)
        if i < len(similar_cars):
            with cols[0]:
                display_car_card(similar_cars.iloc[i])
        if i + 1 < len(similar_cars):
            with cols[1]:
                display_car_card(similar_cars.iloc[i + 1])

    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.current_page == 'booking':
    # Trang ƒë·∫∑t xe
    st.markdown("<div class='section'>", unsafe_allow_html=True)
    st.markdown("<h3 class='section-header'>ƒê·∫∑t thu√™ xe</h3>", unsafe_allow_html=True)

    # Hi·ªÉn th·ªã th√¥ng tin xe ƒë√£ ch·ªçn
    car_selected = st.session_state.booking_state['car_selected']
    
    st.markdown("<div class='car-card'>", unsafe_allow_html=True)
    
    # Create two columns for image and info
    col_img, col_info = st.columns([1, 1.5])
    
    with col_img:
        # Display car image
        img = get_model_image(car_selected['model'])
        if img is not None:
            st.image(img, use_container_width=True)
    
    with col_info:
        st.markdown(f"<h4>Xe ƒë√£ ch·ªçn: {car_selected['model']}</h4>", unsafe_allow_html=True)
        st.markdown(f"<p><b>ƒê·∫°i l√Ω:</b> {car_selected['dealer']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>ƒê·ªãa ch·ªâ:</b> {car_selected['address']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p class='price'>{format_currency(car_selected['rental_fee'])}/ng√†y</p>", unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)

    # Add some CSS to style the booking car card
    st.markdown("""
        <style>
        .car-card {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        .car-card h4 {
            color: #1a1a1a;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }
        .car-card p {
            margin-bottom: 0.5rem;
            color: #4a4a4a;
        }
        .car-card .price {
            color: #28a745;
            font-size: 1.2rem;
            font-weight: bold;
            margin-top: 1rem;
        }
        </style>
    """, unsafe_allow_html=True)

    # Form ƒë·∫∑t xe
    with st.form("booking_form"):
        st.write("### Th√¥ng tin ƒë·∫∑t xe")

        # Ng√†y nh·∫≠n v√† tr·∫£ xe
        col_date1, col_date2 = st.columns(2)
        with col_date1:
            start_date = st.date_input(
                "Ng√†y nh·∫≠n xe:",
                value=datetime.date.today() + datetime.timedelta(days=1),
                min_value=datetime.date.today() + datetime.timedelta(days=1)
            )
        with col_date2:
            end_date = st.date_input(
                "Ng√†y tr·∫£ xe:",
                value=datetime.date.today() + datetime.timedelta(days=3),
                min_value=start_date + datetime.timedelta(days=1)
            )

        # T√≠nh s·ªë ng√†y thu√™ v√† t·ªïng ti·ªÅn
        rental_days = (end_date - start_date).days
        total_cost = car_selected['rental_fee'] * rental_days

        st.markdown(f"<p><b>S·ªë ng√†y thu√™:</b> {rental_days} ng√†y</p>", unsafe_allow_html=True)
        st.markdown(f"<p class='price'>T·ªïng ti·ªÅn: {format_currency(total_cost)}</p>", unsafe_allow_html=True)

        st.write("### Th√¥ng tin kh√°ch h√†ng")

        # Form th√¥ng tin kh√°ch h√†ng
        full_name = st.text_input("H·ªç v√† t√™n:")
        phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i:")
        email = st.text_input("Email:")
        address = st.text_area("ƒê·ªãa ch·ªâ:")
        id_number = st.text_input("S·ªë CMND/CCCD:")

        st.write("### Ph∆∞∆°ng th·ª©c thanh to√°n")
        payment_method = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:",
            options=["Thanh to√°n khi nh·∫≠n xe", "Chuy·ªÉn kho·∫£n ng√¢n h√†ng", "Th·∫ª t√≠n d·ª•ng/ghi n·ª£"]
        )

        agreement = st.checkbox("T√¥i ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán thu√™ xe")

        # N√∫t ƒë·∫∑t xe v√† h·ªßy (kh√¥ng l·ªìng c·ªôt trong c·ªôt)
        submit_booking = st.form_submit_button("X√°c nh·∫≠n ƒë·∫∑t xe", use_container_width=True)
        cancel_booking = st.form_submit_button("H·ªßy", use_container_width=True)

    # X·ª≠ l√Ω sau khi form ƒë∆∞·ª£c submit
    if submit_booking:
        if full_name and phone and email and address and id_number and agreement:
            # L∆∞u th√¥ng tin ƒë·∫∑t xe
            st.session_state.booking_state['customer_info'] = {
                'full_name': full_name,
                'phone': phone,
                'email': email,
                'address': address,
                'id_number': id_number
            }
            st.session_state.booking_state['booking_dates'] = {
                'start_date': start_date,
                'end_date': end_date
            }
            st.session_state.booking_state['total_days'] = rental_days
            st.session_state.booking_state['total_amount'] = total_cost
            st.session_state.booking_state['payment_method'] = payment_method
            st.session_state.booking_state['booking_step'] = 2

            # Chuy·ªÉn sang trang x√°c nh·∫≠n ƒë·∫∑t xe
            st.session_state.current_page = 'booking_confirmation'
            st.rerun()
        else:
            st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t xe.")

    if cancel_booking:
        # Reset tr·∫°ng th√°i ƒë·∫∑t xe v√† quay v·ªÅ trang ch·ªß
        st.session_state.booking_state = {
            'car_selected': None,
            'booking_step': 0,
            'customer_info': {},
            'booking_dates': {},
            'total_days': 0,
            'total_amount': 0
        }
        st.session_state.current_page = 'home'
        st.rerun()

    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.current_page == 'booking_confirmation':
    # Trang x√°c nh·∫≠n ƒë·∫∑t xe
    st.markdown("<div class='section'>", unsafe_allow_html=True)
    st.markdown("<h3 class='section-header'>X√°c nh·∫≠n ƒë·∫∑t xe</h3>", unsafe_allow_html=True)

    booking_info = st.session_state.booking_state
    customer_info = booking_info['customer_info']
    booking_dates = booking_info['booking_dates']

    # S·ª≠ d·ª•ng container thay v√¨ columns
    left_info, right_info = st.columns(2)

    with left_info:
        st.write("### Th√¥ng tin xe")
        st.markdown(f"<p><b>M·∫´u xe:</b> {booking_info['car_selected']['model']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>ƒê·∫°i l√Ω:</b> {booking_info['car_selected']['dealer']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>ƒê·ªãa ch·ªâ nh·∫≠n xe:</b> {booking_info['car_selected']['address']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>Ng√†y nh·∫≠n xe:</b> {booking_dates['start_date'].strftime('%d/%m/%Y')}</p>",
                    unsafe_allow_html=True)
        st.markdown(f"<p><b>Ng√†y tr·∫£ xe:</b> {booking_dates['end_date'].strftime('%d/%m/%Y')}</p>",
                    unsafe_allow_html=True)
        st.markdown(f"<p><b>S·ªë ng√†y thu√™:</b> {booking_info['total_days']} ng√†y</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>Gi√° thu√™:</b> {format_currency(booking_info['car_selected']['rental_fee'])}/ng√†y</p>",
                    unsafe_allow_html=True)
        st.markdown(f"<p class='price'>T·ªïng ti·ªÅn: {format_currency(booking_info['total_amount'])}</p>",
                    unsafe_allow_html=True)

    with right_info:
        st.write("### Th√¥ng tin kh√°ch h√†ng")
        st.markdown(f"<p><b>H·ªç v√† t√™n:</b> {customer_info['full_name']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>S·ªë ƒëi·ªán tho·∫°i:</b> {customer_info['phone']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>Email:</b> {customer_info['email']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>ƒê·ªãa ch·ªâ:</b> {customer_info['address']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>S·ªë CMND/CCCD:</b> {customer_info['id_number']}</p>", unsafe_allow_html=True)
        st.markdown(f"<p><b>Ph∆∞∆°ng th·ª©c thanh to√°n:</b> {booking_info.get('payment_method', 'Ch∆∞a ch·ªçn')}</p>",
                    unsafe_allow_html=True)

    # Th√¥ng tin m√£ ƒë·∫∑t xe
    booking_code = "GF" + datetime.datetime.now().strftime("%y%m%d%H%M%S")
    st.info(f"M√£ ƒë·∫∑t xe c·ªßa b·∫°n l√†: **{booking_code}**")
    st.success(
        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa Green Future. Nh√¢n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 30 ph√∫t ƒë·ªÉ x√°c nh·∫≠n th√¥ng tin ƒë·∫∑t xe.")

    # Hi·ªÉn th·ªã th√¥ng tin thanh to√°n n·∫øu ch·ªçn chuy·ªÉn kho·∫£n
    if booking_info.get('payment_method') == "Chuy·ªÉn kho·∫£n ng√¢n h√†ng":
        st.markdown("""
        ### Th√¥ng tin thanh to√°n
        Vui l√≤ng chuy·ªÉn kho·∫£n ƒë·∫øn t√†i kho·∫£n sau:

        **Ng√¢n h√†ng:** Vietcombank  
        **S·ªë t√†i kho·∫£n:** 0123456789  
        **Ch·ªß t√†i kho·∫£n:** C√îNG TY TNHH GREEN FUTURE  
        **N·ªôi dung chuy·ªÉn kho·∫£n:** M√£ ƒë·∫∑t xe {0}
        """.format(booking_code), unsafe_allow_html=True)

    # N√∫t ƒë·∫∑t xe m·ªõi
    col1, col2 = st.columns(2)
    with col1:
        if st.button("ƒê·∫∑t xe m·ªõi", use_container_width=True):
            # Reset tr·∫°ng th√°i ƒë·∫∑t xe
            st.session_state.booking_state = {
                'car_selected': None,
                'booking_step': 0,
                'customer_info': {},
                'booking_dates': {},
                'total_days': 0,
                'total_amount': 0
            }
            st.session_state.current_page = 'home'
            st.rerun()

    with col2:
        # T√πy ch·ªçn ƒë·ªÉ in h√≥a ƒë∆°n
        if st.button("In h√≥a ƒë∆°n", use_container_width=True):
            st.info(
                "T√≠nh nƒÉng in h√≥a ƒë∆°n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n ƒë·ªÉ nh·∫≠n h√≥a ƒë∆°n ƒëi·ªán t·ª≠.")

    st.markdown("</div>", unsafe_allow_html=True)

# Gi·ªõi thi·ªáu d·ªãch v·ª• v√† footer ·ªü t·∫•t c·∫£ c√°c trang
# Gi·ªõi thi·ªáu v·ªÅ VinFast
st.markdown("<div class='section'>", unsafe_allow_html=True)
st.markdown("<h3 class='section-header'>V·ªÅ xe ƒëi·ªán VinFast</h3>", unsafe_allow_html=True)

st.write("""
VinFast l√† th∆∞∆°ng hi·ªáu √¥ t√¥ ƒëi·ªán h√†ng ƒë·∫ßu Vi·ªát Nam, v·ªõi cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao 
v√† th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng. Green Future t·ª± h√†o l√† ƒë·ªëi t√°c ch√≠nh th·ª©c c·ªßa VinFast, cung c·∫•p d·ªãch v·ª• 
cho thu√™ xe ƒëi·ªán VinFast v·ªõi ƒëa d·∫°ng m·∫´u xe t·ª´ VF e34, VF 7, VF 8 ƒë·∫øn VF 9.

T·∫•t c·∫£ c√°c xe cho thu√™ t·∫°i Green Future ƒë·ªÅu l√† xe m·ªõi, ƒë∆∞·ª£c b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ v√† trang b·ªã ƒë·∫ßy ƒë·ªß 
c√°c t√≠nh nƒÉng an to√†n hi·ªán ƒë·∫°i. Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám thu√™ xe thu·∫≠n ti·ªán, 
an to√†n v√† th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng.
""")

# FAQ
st.markdown("<div class='section'>", unsafe_allow_html=True)
st.markdown("<h3 class='section-header'>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h3>", unsafe_allow_html=True)

with st.expander("L√†m th·∫ø n√†o ƒë·ªÉ thu√™ xe VinFast t·∫°i Green Future?"):
    st.write("""
    ƒê·ªÉ thu√™ xe VinFast t·∫°i Green Future, b·∫°n ch·ªâ c·∫ßn th·ª±c hi·ªán c√°c b∆∞·ªõc ƒë∆°n gi·∫£n sau:

    1. T√¨m ki·∫øm v√† ch·ªçn m·∫´u xe ph√π h·ª£p tr√™n trang web
    2. Nh·∫•p v√†o n√∫t "ƒê·∫∑t xe ngay"
    3. ƒêi·ªÅn th√¥ng tin c√° nh√¢n v√† th·ªùi gian thu√™
    4. X√°c nh·∫≠n ƒë·∫∑t xe
    5. Nh√¢n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω li√™n h·ªá ƒë·ªÉ x√°c nh·∫≠n v√† h∆∞·ªõng d·∫´n th·ªß t·ª•c nh·∫≠n xe
    """)

with st.expander("Chi ph√≠ thu√™ xe bao g·ªìm nh·ªØng g√¨?"):
    st.write("""
    Chi ph√≠ thu√™ xe t·∫°i Green Future bao g·ªìm:

    - Ph√≠ thu√™ xe theo ng√†y
    - B·∫£o hi·ªÉm xe c∆° b·∫£n
    - H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7
    - Pin xe ƒë√£ ƒë∆∞·ª£c s·∫°c ƒë·∫ßy khi giao

    Chi ph√≠ kh√¥ng bao g·ªìm:

    - Ph√≠ s·∫°c pin trong qu√° tr√¨nh s·ª≠ d·ª•ng
    - Ph√≠ c·∫ßu ƒë∆∞·ªùng, b·∫øn b√£i
    - Ph√≠ v·ªá sinh xe (n·∫øu xe qu√° b·∫©n khi tr·∫£)
    - Ph√≠ s·ª≠a ch·ªØa n·∫øu c√≥ h∆∞ h·ªèng do ng∆∞·ªùi thu√™ g√¢y ra
    """)

with st.expander("C·∫ßn nh·ªØng gi·∫•y t·ªù g√¨ ƒë·ªÉ thu√™ xe?"):
    st.write("""
    ƒê·ªÉ thu√™ xe t·∫°i Green Future, b·∫°n c·∫ßn chu·∫©n b·ªã:

    - CMND/CCCD ho·∫∑c H·ªô chi·∫øu (b·∫£n g·ªëc)
    - Gi·∫•y ph√©p l√°i xe h·ª£p l·ªá (b·∫£n g·ªëc)
    - H·ªô kh·∫©u/KT3 ho·∫∑c gi·∫•y t·ªù ch·ª©ng minh n∆°i c∆∞ tr√∫
    - ƒê·∫∑t c·ªçc theo quy ƒë·ªãnh (ti·ªÅn m·∫∑t ho·∫∑c chuy·ªÉn kho·∫£n)
    """)

with st.expander("L√†m th·∫ø n√†o ƒë·ªÉ s·∫°c xe ƒëi·ªán VinFast?"):
    st.write("""
    Xe ƒëi·ªán VinFast c√≥ th·ªÉ ƒë∆∞·ª£c s·∫°c b·∫±ng nhi·ªÅu c√°ch:

    1. Tr·∫°m s·∫°c c√¥ng c·ªông VinFast tr√™n to√†n qu·ªëc
    2. S·∫°c t·∫°i nh√† v·ªõi b·ªô s·∫°c ti√™u chu·∫©n (ƒë·ªëi v·ªõi VF e34)
    3. Tr·∫°m s·∫°c t·∫°i c√°c ƒë·∫°i l√Ω VinFast

    Green Future s·∫Ω cung c·∫•p th·∫ª s·∫°c v√† h∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·∫°c xe khi b√†n giao.
    """)

with st.expander("Ch√≠nh s√°ch h·ªßy ƒë·∫∑t xe nh∆∞ th·∫ø n√†o?"):
    st.write("""
    Ch√≠nh s√°ch h·ªßy ƒë·∫∑t xe c·ªßa Green Future:

    - H·ªßy tr∆∞·ªõc 48 gi·ªù: Ho√†n ti·ªÅn 100%
    - H·ªßy trong v√≤ng 24-48 gi·ªù: Ho√†n ti·ªÅn 70%
    - H·ªßy trong v√≤ng 12-24 gi·ªù: Ho√†n ti·ªÅn 50%
    - H·ªßy d∆∞·ªõi 12 gi·ªù: Kh√¥ng ho√†n ti·ªÅn

    Tr∆∞·ªùng h·ª£p b·∫•t kh·∫£ kh√°ng s·∫Ω ƒë∆∞·ª£c xem x√©t c·ª• th·ªÉ.
    """)

st.markdown("</div>", unsafe_allow_html=True)

# Footer
st.markdown("<div class='footer'>", unsafe_allow_html=True)
st.markdown("¬© 2025 Green Future. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.", unsafe_allow_html=True)
st.markdown("ƒê·ªãa ch·ªâ: T√≤a vƒÉn ph√≤ng Symphony, ƒê∆∞·ªùng Chu Huy M√¢n, Khu ƒë√¥ th·ªã Vinhomes Riverside, Ph∆∞·ªùng Ph√∫c L·ª£i, Qu·∫≠n Long Bi√™n, Th√†nh ph·ªë H√† N·ªôi, Vi·ªát Nam | Hotline: 0896 229 555 | Email: support@greenfuture.tech",
            unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)
